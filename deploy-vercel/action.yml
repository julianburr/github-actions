name: Deploy to Vercel
description: This action helps deploying a project using Vercel

inputs:
  vercel-project-id:
    description: "Vercel Project ID"
    required: true
  vercel-org-id:
    description: "Vercel Organisation ID"
    required: true
  vercel-token:
    description: "Vercel Token"
    required: true
  github-token:
    description: "Github Token"
    required: true
  is-production:
    description: "Boolean whether or not this is a production deployment"
    default: false
  add-comment:
    description: "For PRs, the action can optionally add a comment on the PR with a link to the deployed URL"
    default: false

outputs:
  deploy-id:
    description: "Github Actions deployment ID"
  deploy-url:
    description: "URL the project has been deployed to"

runs:
  using: "composite"
  steps:
    - name: Create github deployment
      id: deployment
      uses: actions/github-script@v5
      env:
        PRODUCTION: ${{ inputs.is-production }}
        SHA: ${{ github.event.pull_request.head.sha | github.sha }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { PRODUCTION, SHA } = process.env;
          const deployment = await github.rest.repos.createDeployment({
            ...context.repo,
            ref: SHA,
            required_contexts: [],
            environment: PRODUCTION
              ? "Production"
              : "Preview"
          });
          core.setOutput("id", deployment.data.id);

    - name: Deploy via vercel
      shell: bash
      id: vercel
      run: |-
        mkdir .vercel
        echo '{ "projectId": "${{ inputs.vercel-project-id }}", "orgId": "${{ inputs.vercel-org-id}}" }' \
          > .vercel/project.json

        vercel --token=${{ inputs.vercel-token }} > url.txt
        echo "::set-output name=url::$(cat url.txt)"

    - name: Add comment with deployment url
      uses: actions/github-script@v5
      if: ${{ inputs.add-comment }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { issue: { number: issue_number }, repo: { owner, repo } } = context;

          const comments = await github.rest.issues.listComments({issue_number, owner, repo});
          const comment = comments.data.find(comment => comment.body.startsWith('<!-- automated PR comment -->'));
          if (comment) {
            github.rest.issues.deleteComment({issue_number, owner, repo, comment_id: comment.id});
          }

          const body = `<!-- automated PR comment -->\n\nPR has been deployed to: ${{ steps.vercel.outputs.url }}`
          github.rest.issues.createComment({
            issue_number,
            owner,
            repo,
            body
          });

    - name: On success
      if: success()
      uses: actions/github-script@v5
      env:
        PRODUCTION: ${{ inputs.is-production }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { PRODUCTION } = process.env;
          github.rest.repos.createDeploymentStatus({
            ...context.repo,
            deployment_id: '${{ steps.deployment.outputs.id }}',
            state: 'success',
            environment_url: "${{ steps.vercel.outputs.url }}",
            description: PRODUCTION
              ? `Deployed to production URL`
              : `Preview deployed to ${{ steps.vercel.outputs.url }}`,
          });

    - name: On error
      if: failure() || cancelled()
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          github.rest.repos.createDeploymentStatus({
            ...context.repo,
            deployment_id: '${{ steps.deployment.outputs.id }}',
            state: 'failure'
          });
